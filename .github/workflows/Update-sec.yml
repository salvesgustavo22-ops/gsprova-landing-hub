name: LGPD - Contatos + Rotas + Footer + Supabase

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure folders
        run: |
          mkdir -p src/pages src/components src/components/legal src/lib public supabase/migrations

      # ----------------- Supabase: tabela 'contatos' + RLS -----------------
      - name: Create SQL migration for contatos
        run: |
          TS=$(date +%Y%m%d%H%M%S)
          FILE="supabase/migrations/${TS}_create_contatos.sql"
          cat > "$FILE" <<'EOF'
          -- Tabela de contatos (mensagens de /contato)
          create table if not exists public.contatos (
            id uuid primary key default gen_random_uuid(),
            nome text,
            email text,
            whats text,
            assunto text,
            mensagem text,
            privacy_consent boolean not null default false,
            marketing_opt_in boolean not null default false,
            created_at timestamptz not null default now()
          );

          alter table public.contatos enable row level security;

          -- Políticas mínimas (ajuste conforme seu modelo de auth)
          do $$
          begin
            if not exists (select 1 from pg_policies where tablename = 'contatos' and policyname = 'allow_insert_any') then
              create policy "allow_insert_any" on public.contatos
                for insert to anon, authenticated
                with check (true);
            end if;
          end$$;
          EOF
          echo "Created migration: $FILE"

      # (Opcional) Aplicar migração automaticamente se secrets existirem
      - name: Install Supabase CLI
        if: ${{ secrets.SUPABASE_ACCESS_TOKEN != '' && secrets.SUPABASE_PROJECT_REF != '' }}
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          npm i -g supabase@latest

      - name: Link project and push migration
        if: ${{ secrets.SUPABASE_ACCESS_TOKEN != '' && secrets.SUPABASE_PROJECT_REF != '' }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          supabase link --project-ref "$SUPABASE_PROJECT_REF" --workdir .
          supabase db push --included "supabase/migrations" || true

      # ----------------- Supabase client mínimo (se faltar) -----------------
      - name: Create minimal supabase client if missing
        run: |
          if [ ! -f "src/lib/supabase.ts" ]; then
            cat > src/lib/supabase.ts <<'EOF'
            import { createClient } from "@supabase/supabase-js";
            const url = import.meta.env.VITE_SUPABASE_URL as string;
            const anon = import.meta.env.VITE_SUPABASE_ANON_KEY as string;
            export const supabase = createClient(url!, anon!);
            EOF
          fi

      # ----------------- Páginas legais (cria/atualiza) -----------------
      - name: Write Sobre.tsx
        run: |
          cat > src/pages/Sobre.tsx <<'EOF'
          import React from "react";
          export default function Sobre() {
            return (
              <main className="mx-auto max-w-3xl px-6 py-10">
                <h1 className="text-3xl font-bold mb-2">Sobre o GS Aprova</h1>
                <p className="text-sm text-gray-500 mb-8">Última atualização: 15/09/2025</p>
                <section className="space-y-4">
                  <h2 className="text-xl font-semibold">Quem somos</h2>
                  <p>Plataforma educacional focada em desempenho real (ENEM, vestibulares, concursos).</p>
                  <h2 className="text-xl font-semibold">O que fazemos</h2>
                  <ul className="list-disc pl-5 space-y-2">
                    <li>Correção de redação com feedback detalhado.</li>
                    <li>Aulas e mentorias focadas nos pontos críticos.</li>
                    <li>Materiais e exercícios práticos.</li>
                  </ul>
                </section>
              </main>
            );
          }
          EOF

      - name: Write Termos.tsx
        run: |
          cat > src/pages/Termos.tsx <<'EOF'
          import React from "react";
          export default function Termos() {
            return (
              <main className="mx-auto max-w-3xl px-6 py-10">
                <h1 className="text-3xl font-bold mb-2">Termos de Uso</h1>
                <p className="text-sm text-gray-500 mb-8">Última atualização: 15/09/2025</p>
                <section className="space-y-4">
                  <h2 className="text-xl font-semibold">1. Aceite</h2>
                  <p>Ao usar o site, você aceita estes Termos e a <a className="underline" href="/privacidade">Política de Privacidade</a>.</p>
                  <h2 className="text-xl font-semibold">2. Serviços</h2>
                  <p>Correção de redações e orientação de estudos; SLA de até <strong>48h úteis</strong> após confirmação do pagamento.</p>
                </section>
              </main>
            );
          }
          EOF

      - name: Write Privacidade.tsx
        run: |
          cat > src/pages/Privacidade.tsx <<'EOF'
          import React from "react";
          export default function Privacidade() {
            return (
              <main className="mx-auto max-w-3xl px-6 py-10">
                <h1 className="text-3xl font-bold mb-2">Política de Privacidade (LGPD)</h1>
                <p className="text-sm text-gray-500 mb-8">Última atualização: 15/09/2025</p>
                <section className="space-y-4">
                  <h2 className="text-xl font-semibold">Dados coletados</h2>
                  <ul className="list-disc pl-5 space-y-2">
                    <li>Nome, e-mail e WhatsApp (formulários).</li>
                    <li>Redações e anexos enviados.</li>
                    <li>Dados técnicos/analytics (cookies).</li>
                  </ul>
                </section>
              </main>
            );
          }
          EOF

      # ----------------- Footer com links corretos -----------------
      - name: Update footer.tsx with Router Links
        run: |
          cat > src/components/footer.tsx <<'EOF'
          import React from "react";
          import { Link } from "react-router-dom";
          export default function Footer() {
            return (
              <footer className="border-t py-6 text-sm">
                <div className="mx-auto max-w-6xl px-4 flex flex-col sm:flex-row items-center justify-between gap-3">
                  <p>&copy; {new Date().getFullYear()} GS Aprova. Todos os direitos reservados.</p>
                  <nav className="flex gap-4">
                    <Link className="underline" to="/sobre">Sobre</Link>
                    <Link className="underline" to="/termos">Termos</Link>
                    <Link className="underline" to="/privacidade">Privacidade</Link>
                  </nav>
                </div>
              </footer>
            );
          }
          EOF

      # ----------------- Patch de rotas no App.tsx -----------------
      - name: Patch App.tsx to include legal routes and Footer layout
        run: |
          if [ -f "src/App.tsx" ]; then
            # Garante imports das páginas legais
            grep -q 'from "./pages/Sobre"' src/App.tsx || sed -i '1i import Sobre from "./pages/Sobre";' src/App.tsx
            grep -q 'from "./pages/Termos"' src/App.tsx || sed -i '1i import Termos from "./pages/Termos";' src/App.tsx
            grep -q 'from "./pages/Privacidade"' src/App.tsx || sed -i '1i import Privacidade from "./pages/Privacidade";' src/App.tsx
            # Garante import do Footer
            if ! grep -q 'from "./components/footer"' src/App.tsx; then
              sed -i '1i import Footer from "./components/footer";' src/App.tsx
            fi
            # Garante rotas /sobre /termos /privacidade
            if grep -q '<Routes>' src/App.tsx && ! grep -q 'path="/termos"' src/App.tsx; then
              sed -i 's@<Route path="\\*" element={<NotFound />} />@<Route path="/sobre" element={<Sobre />} />\n                  <Route path="/termos" element={<Termos />} />\n                  <Route path="/privacidade" element={<Privacidade />} />\n                  <Route path="*" element={<NotFound />} />@' src/App.tsx
            fi
            # Garante Footer fora das Routes (layout padrão)
            if ! grep -q '<Footer />' src/App.tsx; then
              # injeta antes de fechar o BrowserRouter / wrapper principal
              sed -i 's@</BrowserRouter>@  <Footer />\n        </BrowserRouter>@' src/App.tsx || true
              sed -i 's@</Routes>\\n\\s*</main>@</Routes>\n              </main>\n              <Footer />@' src/App.tsx || true
            fi
          fi

      # ----------------- Integrar Contato.tsx com tabela 'contatos' -----------------
      - name: Wire up Contato.tsx to Supabase "contatos"
        run: |
          cat > src/pages/Contato.tsx <<'EOF'
          import React, { useState } from "react";
          import { supabase } from "../lib/supabase";

          export default function Contato() {
            const [nome, setNome] = useState("");
            const [email, setEmail] = useState("");
            const [whats, setWhats] = useState("");
            const [assunto, setAssunto] = useState("");
            const [mensagem, setMensagem] = useState("");
            const [privacyConsent, setPrivacyConsent] = useState(false);
            const [marketingOptIn, setMarketingOptIn] = useState(false);
            const [loading, setLoading] = useState(false);

            const submit = async (e: React.FormEvent) => {
              e.preventDefault();
              if (!privacyConsent) { alert("Você precisa aceitar a Política de Privacidade."); return; }
              setLoading(true);
              try {
                // grava em 'contatos'
                const { error } = await supabase.from("contatos").insert([{
                  nome, email, whats, assunto, mensagem,
                  privacy_consent: privacyConsent,
                  marketing_opt_in: marketingOptIn,
                }]);
                if (error) throw error;

                // OPCIONAL: também gravar em 'leads' (comente se não quiser)
                await supabase.from("leads").insert([{
                  nome, email, whats,
                  privacy_consent: privacyConsent,
                  marketing_opt_in: marketingOptIn,
                  origem: "contato"
                }]).catch(()=>{ /* ignora erro se tabela/origem não existir */ });

                alert("Mensagem enviada com sucesso!");
                setNome(""); setEmail(""); setWhats(""); setAssunto(""); setMensagem("");
                setPrivacyConsent(false); setMarketingOptIn(false);
              } catch (err: any) {
                alert("Erro ao enviar: " + (err?.message ?? "desconhecido"));
              } finally {
                setLoading(false);
              }
            };

            return (
              <div className="mx-auto max-w-xl px-6 py-10">
                <h1 className="text-2xl font-semibold mb-4">Contato</h1>
                <form onSubmit={submit} className="space-y-3">
                  <input className="w-full border rounded px-3 py-2" placeholder="Nome" value={nome} onChange={(e)=>setNome(e.target.value)} />
                  <input className="w-full border rounded px-3 py-2" placeholder="E-mail" value={email} onChange={(e)=>setEmail(e.target.value)} />
                  <input className="w-full border rounded px-3 py-2" placeholder="WhatsApp" value={whats} onChange={(e)=>setWhats(e.target.value)} />
                  <input className="w-full border rounded px-3 py-2" placeholder="Assunto" value={assunto} onChange={(e)=>setAssunto(e.target.value)} />
                  <textarea className="w-full border rounded px-3 py-2" rows={5} placeholder="Sua mensagem" value={mensagem} onChange={(e)=>setMensagem(e.target.value)} />
                  <label className="flex items-start gap-2 text-sm">
                    <input type="checkbox" checked={privacyConsent} onChange={(e)=>setPrivacyConsent(e.target.checked)} required />
                    <span>Li e aceito os <a className="underline" href="/termos" target="_blank" rel="noreferrer">Termos</a> e a <a className="underline" href="/privacidade" target="_blank" rel="noreferrer">Política de Privacidade</a>.</span>
                  </label>
                  <label className="flex items-start gap-2 text-sm">
                    <input type="checkbox" checked={marketingOptIn} onChange={(e)=>setMarketingOptIn(e.target.checked)} />
                    <span>Aceito receber comunicações por e-mail/WhatsApp (opt-in, cancelamento a qualquer momento).</span>
                  </label>
                  <button disabled={loading} className="border rounded px-3 py-2">{loading ? "Enviando..." : "Enviar"}</button>
                </form>
              </div>
            );
          }
          EOF

      # ----------------- SPA fallback (evita 404 direto nas rotas) -----------------
      - name: Add SPA redirects
        run: |
          echo "/*  /index.html  200" > public/_redirects
          cat > public/404.html <<'EOF'
          <!doctype html><html><head><meta charset="utf-8"><meta http-equiv="refresh" content="0; url=/">
          <script>window.location.href="/";</script></head><body></body></html>
          EOF

      # ----------------- PR -----------------
      - name: Create branch + PR (+ auto-merge)
        env: { GH_TOKEN: ${{ github.token }} }
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -B chore/lgpd-contatos-routes
          git add .
          git commit -m "feat: tabela contatos + integração Contato.tsx; rotas legais + footer; SPA fallback"
          git push -u origin chore/lgpd-contatos-routes --force
          gh pr create --base main --head chore/lgpd-contatos-routes --title "LGPD: criar tabela contatos + integrar Contato + rotas legais + footer" --body "Cria public.contatos com RLS; integra Contato.tsx ao Supabase; garante rotas /sobre,/termos,/privacidade no App.tsx; Footer com links; fallback SPA."
          gh pr merge --auto --squash || true
